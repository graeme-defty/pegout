%% Grammar and transformations

rules <- space? declaration_sequence space? code_block? space?
`
  io_lib:format("~s~n",[lists:flatten(Node)])
`;

declaration_sequence <- declaration (space declaration)*
`
  Node
`;

declaration <- nonterminal space '<-' space parsing_expression space? code_block? space? ';'
`
  "<kbd><font color=\"red\" id=\"" ++ hd(Node) ++ "\">" ++ hd(Node) ++ "</font>\n" ++ 
  nth(2,Node) ++ html_escape(nth(3,Node)) ++ nth(4,Node) ++ nth(5,Node) ++ nth(6,Node) ++ "</kbd>" ++
  case nth(7,Node) of
    "~" ->  "";
    _   ->  "<a href=\"javascript:toggle('x_" ++ hd(Node) ++ "_code_')\"><font size=\"-2\" color=\"grey\">Show/Hide Code</font></a>\n" ++
            "<div id=\"x_" ++ hd(Node) ++ "_code_\" style=\"display: none;\">\n" ++  nth(7,Node) ++ "\n</div>"
  end ++ nth(8,Node)
`;

parsing_expression <- choice / sequence / primary ~;

choice <- alternative (space '/' space alternative)+
`
  Node
`;

alternative <- sequence / labeled_primary ~;

sequence <- labeled_primary (space labeled_primary)+
`
  Node
`;

labeled_primary <- label? primary
`
  Node
`;

label <- alpha_char alphanumeric_char* ':'
`
  Node
`;

primary <- prefix atomic / atomic suffix / atomic
`
  Node
`;

suffix <- repetition_suffix / optional_suffix
`
  Node
`;

optional_suffix <- '?' ~;

repetition_suffix <- '+' / '*' ~;

prefix <- '&' / '!'
`
  Node
`;

atomic <- terminal / !['"[(] nonterminal / parenthesized_expression
`
  case Node of
    [[],_]  -> "<a href=\"#" ++ Node ++ "\">" ++ Node ++ "</a>";
    _       -> Node
  end
`;

parenthesized_expression <- '(' space? parsing_expression space? ')' `Node`;

nonterminal <- alpha_char alphanumeric_char* 
` Node `;

terminal <- quoted_string / character_class / anything_symbol ~;

quoted_string <- single_quoted_string / double_quoted_string
`
  "<font color=\"blue\">" ++ Node ++ "</font>"
`;

double_quoted_string <- '"' (!'"' ("\\\\" / '\\"' / .))* '"' ~;

single_quoted_string <- "'" (!"'" ("\\\\" / "\\'" / .))* "'" ~;

character_class <- '[' (!']' ('\\\\' . / !'\\\\' .))+ ']'
`
  "<font color=\"purple\">" ++ Node ++ "</font>"
`;

anything_symbol <- '.' ` Node `;

alpha_char <- [A-Za-z_] ~;

alphanumeric_char <- alpha_char / [0-9] ~;

space <- (white / comment_to_eol)+ 
`
  Node
`;

comment_to_eol <- '%' (!"\n" .)* 
`
  "<font color=\"darkgreen\">" ++ Node ++ "</font>"
`;

white <- sp / eol ~;

sp <- [ \t] ` "&nbsp;" `;

eol <- [\n\r] ` "\n<br />\n" `;

code_block <- ('`' ('\\`' / '$`' / !'`' .)+ '`') / '~'
`
  case Node of
    [_, Code, _] -> 
        "<pre style=\"color:grey\">" ++ nth(1,Node) ++ html_escape(lists:flatten(nth(2,Node))) ++ nth(3,Node) ++ "\n</pre>";
    Else -> html_escape(Else)
  end
`;

%% Extra functions
`
-import(lists,[nth/2]).

html_escape(String) -> html_escape(String, []).
html_escape([], Acc)    -> lists:reverse(Acc);
html_escape([$<|T],Acc) -> html_escape(T,[$;,$t,$l,$&|Acc]);
html_escape([$>|T],Acc) -> html_escape(T,[$;,$t,$g,$&|Acc]);
html_escape([$"|T],Acc) -> html_escape(T,[$;,$t,$o,$u,$q,$&|Acc]);
%html_escape([$'|T],Acc) -> html_escape(T,[$;,$s,$o,$p,$a,$&|Acc]);
html_escape([H|T],Acc)  -> html_escape(T,[H|Acc]).
`
